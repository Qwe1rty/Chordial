TODO LIST:

GENERAL:
- Formalize the "tag" pattern when making logs from a duplicate actor
- Configure the logging backend to be async?
- Some form of proper environment variable/configuration/dependency injection
- Document everything both in the code and on Github
- Convert usages of the "String" type for hashes into "Digest"
- Add cluster names support

BUILD SETUP:
- Keep the ports configured in a central place (currently in code, makefile, & docker build)
- Move over to Minikube from Docker Desktop, to ensure the most recent K8s version (v1.17.0)

DOCUMENTATION:
- Move everything to its own wiki section
- Expand on the Kubernetes cluster setup section, with more details, examples, and a walkthrough
  for prerequisite cluster setup
- Document the high-level architecture and modules of the program
- Document the directory structure of the program, including the build-related stuff
- Include links to references (within itself to other sections, the wiki, or external docs)


CLIENT:
- Add a executable program wrapper around the client JAR to simplify deployment

MEMBERSHIP:
- Possibly allow for different seed node and self IP addresser methods
- Make sure the "random" call doesn't return the local node ID
- Allow some way for Kubernetes to make a readiness probe
- Change membership table operations to take advantage of the case class .copy(...) method

GOSSIP:
- If the membership actor random call returns None, don't place it on cooldown

SERVICE:
- Replace the ActorMaterializer instance with the system wide one
- Reorganize service layer so its initialization in Chordial.class matches the others
- Reorganize the templating of the different request types, so that RequestServiceActor isn't
  responsible for the different request types and their handling
- Encapsulate the promise/future tie-in so that the .flatten doesn't need to be there

PERSISTENCE:
- Change PersistenceActor map to some form of cache
  - Ensure that the file stream is closed upon eviction
- Allow for concurrent read access to the same key OR some type of manual caching
- Replace .get calls for the pendingRequest: Option[ActorRef] in KeyStateActor
- Formalize KeyStateActor to an actual state machine

PARTITIONING:
- Eventually decouple the hash range join from the membership join through separate gossips

