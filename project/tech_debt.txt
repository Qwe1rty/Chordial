TODO LIST:

GENERAL:
- Configure the logging backend to be async?
- Some form of proper environment variable/configuration/dependency injection
- Maybe convert usages of the "String" type for hashes into "Digest"

BUILD SETUP:
- Keep the ports configured in a central place (currently in code, makefile, & docker build)
- Move the IpAddress repo to Maven + actually port it to Scala 2.13.1 properly

DOCUMENTATION:
- Move everything to its own wiki section
- Expand on the Kubernetes cluster setup section, with more details, examples, and a walkthrough
  for prerequisite cluster setup
- Document the high-level architecture and modules of the program
- Document the directory structure of the program, including the build-related stuff
- Include links to references (within itself to other sections, the wiki, or external docs)
- Flow diagram of a GET/POST/DELETE request, through all the layers & the datatypes passed between them
- Flow diagram of a Raft WAL commit process, data transformations, etc.


CLIENT:
- Add a executable program wrapper around the client JAR to simplify deployment

MEMBERSHIP:
- Allow some way for Kubernetes to make a readiness probe

GOSSIP:
- If the membership table random select returns None, don't place it on cooldown

PERSISTENCE:
- Change PersistenceActor map to some form of cache
  - Ensure that the file stream is closed upon eviction
- Implement the full 2PL for the same key
- Formalize KeyStateActor to an actual state machine

REPLICATION:
- Modify Raft algorithm to buffer new client requests if the leader is dead, and retry later
